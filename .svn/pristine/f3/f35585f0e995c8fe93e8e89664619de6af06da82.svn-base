<template>
  <div>
    <template v-if="fileType == 2">
      <van-uploader
        v-model="picList"
        accept="*"
        :preview-image="true"
        :max-size="max_file_size"
        :multiple="multiple"
        :before-read="beforeRead"
        :after-read="afterRead"
        :before-delete="beforeDelete"
        :deletable="true"
        :max-count="1"
      >
        <!-- <div class="load">
          <img src="@/assets/imgwx/ic_load.png" alt />
          <p>上传作品</p>
        </div> -->
      </van-uploader>
      <van-overlay :show="showFlag" z-index="999999">
        <div class="wrapper">
          <div class="block">
            <van-loading type="spinner" color="#1989fa" />
            <h3 class="h3">视频上传中</h3>
          </div>
        </div>
      </van-overlay>
    </template>
    <template v-if="fileType == 1">
      <el-upload
        class="upload-demo"
        :ref="eleUpload"
        action
        accept=".mp4"
        :on-remove="handleRemove"
        :on-preview="handlePictureCardPreview"
        :auto-upload="true"
        :limit="limit"
        :http-request="uploadPc"
        :before-upload="beforeUpload"
        :on-exceed="exceed"
        :on-change="uploadVideoProcess"
      >
        <el-button size="small" type="primary">点击上传</el-button>
      </el-upload>
      <van-overlay :show="showFlag" z-index="999999">
        <div class="wrapper">
          <div class="block">
            <van-loading type="spinner" color="#1989fa" />
            <i class="h32" style="">视频上传中</i>
          </div>
        </div>
      </van-overlay>
      <!-- <el-progress v-if="videoFlag ==true" type="line" :percentage="videoUploadPercent" style="margin-top:30px;"></el-progress> -->
    </template>
  </div>
</template>
<script type="text/javascript">
// import defalutImg from '@/assets/img/video.png'
// import axios from 'axios'
import $ from 'jquery'
// import ReadApk from 'readApk'
// import plupload from 'plupload'
// 这里使用相对路径，就是该文件相对于static目录的路径
// window.mOxie = window.moxie = require('../../../static/js/plupload/moxie')
// require('../../../static/js/plupload/plupload.dev')
import { mapGetters } from 'vuex'
export default {
  name: 'Upload',
  computed: {
    ...mapGetters(['userInfo', 'isMobile', 'timeDiff'])
  },
  props: {
    // 预览容器id
    preImgParentId: {
      type: String,
      default: ''
    },
    // 文件类型1pc，2-wx
    fileType: {
      type: Number,
      required: true
    },
    // 以防一个页面有多个上传按钮-定义不同的按钮名称
    index: {
      type: Number,
      default: 0
    },
    Url: null,
    // 文件上传的最大值
    max_file_size: {
      type: String,
      default: '150mb'
    },
    accept: {
      type: String,
      default: '.mp4'
    },
    multiple: {
      type: Boolean,
      default: true
    },
    limit: {
      type: Number,
      default: 1
    },
    // name: {
    //   type: Number,
    //   default: 1
    // },
    eleUpload: {
      type: String,
      default: 'upload'
    },
    // 上传有多个添加  按钮
    subscript: {
      type: Number,
      default: 0
    }
  },
  data() {
    return {
      toggledisbale: true,
      // 控制是否显示图片上传+号
      uploadDisabled: false,
      // 允许上传图片的数量
      limitImgNumber: 1,
      dialogImageUrl: '',
      dialogVisible: false,
      picList: [],
      hasPreImage: false,
      uploader: null,
      preUrl: this.Url,
      imageUrl: '',
      percentage: 0,
      jintu: false,
      pushName: '',
      ossParams: {},
      upLoadUrl: '', // 上传地址
      g_object_name: '', // 文件名
      fileName: '', // 上传成功后的文件名

      // 视频
      videoForm: {
        Video: ''
      },
      videoFlag: false,
      sort: 0,
      flieListWx: [],
      videoUploadPercent: 0,
      showFlag: false
    }
  },
  methods: {
    // 视频上传进度条
    uploadVideoProcess(event, file, fileList) {
      if (file[0].status === 'ready') {
        this.videoFlag = true // 进度条显示
        const interval = setInterval(() => {
          if (this.videoUploadPercent >= 100) {
            clearInterval(interval)
            return
          }
          this.videoUploadPercent += 1 // 进度条进度
        }, 80)
      }
    },
    handleRemove(file, fileList) {
      this.$emit('handleRemove', file.uid, this.subscript)
      // this.afterRead(fileList)
      // 手动触发change事件
      // this.handleFileChange(file, fileList)
    },
    handlePictureCardPreview(file) {
      this.dialogImageUrl = file.url
      this.dialogVisible = true
      this.$emit('handlePicture', file)
    },
    // 生成文件名中的随机数
    random_string: function(len) {
      len = len || 32
      var chars = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678'
      var maxPos = chars.length
      var pwd = ''
      for (let i = 0; i < len; i++) {
        pwd += chars.charAt(Math.floor(Math.random() * maxPos))
      }
      return pwd
    },
    // 获取文件的后缀名
    get_suffix: function(filename) {
      const pos = filename.lastIndexOf('.')
      let suffix = ''
      if (pos !== -1) {
        suffix = filename.substring(pos)
      }
      return suffix
    },
    // 文件路径+重新命名上传文件名
    calculateFileName(filename) {
      var suffix = this.get_suffix(filename)
      this.g_object_name =
        this.ossParams.dir +
        '/' +
        Date.parse(new Date()) +
        '_' +
        this.random_string(6) +
        suffix
      return ''
    },
    getFileName(filename) {
      return this.g_object_name
    },
    // 设置上传参数-上传
    set_upload_param(up, filename, ret) {
      if (filename !== '') {
        this.get_suffix(filename)
        this.calculateFileName(filename)
      }
      const new_multipart_params = {
        policy: this.ossParams.policy,
        OSSAccessKeyId: this.ossParams.accessid,
        success_action_status: '200', // 让服务端返回200,不然，默认会返回204
        oss_domain: this.ossParams.oss_domain,
        signature: this.ossParams.signature,
        key: this.g_object_name,
        expire: this.ossParams.expire
      }
      const that = this
      up.setOption({
        url: that.ossParams.oss_domain,
        multipart_params: new_multipart_params
      })

      if (ret) {
        up.start()
      }
    },
    // 图片预览
    /* 转化图片为base64预览*/
    getSignature(callback) {
      var that = this
      this.$apis.getSignature('').then((res) => {
        that.ossParams = res.data.data.list[0]
        that.uploadUrl = res.data.data.list[0].host
        callback()
      })
      // that.ossParams = that.$store.state.app.uploadParams
      // that.uploadUrl = that.ossParams.oss_domain
      // callback()
    },
    afterRead(file, detail) {
      const that = this
      that.showFlag = true
      this.getSignature(() => {
        file.status = 'ready'
        file.message = '上传中...'
        var getSuffix = function(fileName) {
          var pos = fileName.lastIndexOf('.')
          var suffix = ''
          if (pos !== -1) {
            suffix = fileName.substring(pos)
          }
          return suffix
        }
        var filename =
          this.ossParams.dir +
          '/' +
          Date.parse(new Date()) +
          '_' +
          this.random_string(6) +
          getSuffix(file.file.name)
        console.log(file, file.file.name)
        var formData = new FormData()
        // 注意formData里append添加的键的大小写
        formData.append('key', filename) // 存储在oss的文件路径
        formData.append('OSSAccessKeyId', this.ossParams.accessid) // accessKeyId
        formData.append('policy', this.ossParams.policy) // policy
        formData.append('Signature', this.ossParams.signature) // 签名
        // 如果是base64文件，那么直接把base64字符串转成blob对象进行上传就可以了
        formData.append('file', file.file)
        formData.append('success_action_status', 200) // 成功后返回的操作码
        var url = this.ossParams.oss_domain
        var fileUrl = this.ossParams.oss_domain + '/' + filename
        $.ajax({
          url: url,
          type: 'POST',
          data: formData,
          async: false,
          cache: false,
          contentType: false,
          processData: false,
          success: function(data) {
            file.percentage = 100
            file.status = 'success'
            file.message = '上传成功'
            that.showFlag = false
            that.$emit('uploadSuccess', fileUrl, file.file.uid, that.subscript)
          },
          error: function(data) {
            console.log(data)
            file.status = 'failed'
            file.message = '上传失败'
          }
        })
      })
    },
    beforeDelete(file, detail) {
      // console.log(['picList', this.picList])
      this.picList.splice(detail.index, 1)
      console.log('ddd', file, detail)
      this.$emit('delete', detail, this.subscript)
    },
    startUpload() {},
    beforeRead(file) {
      // debugger
      // this.$toast(file.type)

      const isJPG = file.type === 'video/mp4'
      if (!isJPG) {
        this.$toast('请上传 mp4格式视频')
      }
      const isLt15M = file.size / 1024 / 1024 < 100
      if (!isLt15M) {
        this.$message.error('上传视频大小不能超过 100MB!')
      }
      return isJPG && isLt15M
    },
    /** ***
     * pc上传
     */
    beforeUpload(file, fileList) {
      // const isJPG = (file.raw.type === 'image/jpeg' || file.raw.type === 'image/png')

      // const isLt10M = file.size / 1024 / 1024 < 10
      // if (!isJPG) {
      //   this.$message.error('上传头像图片格式不对，只支持jpg，png!')
      // }
      // if (!isLt10M) {
      //   this.$message.error('上传头像图片大小不能超过 10MB!')
      // }
      // return isJPG && isLt10M
      const isLt15M = file.size / 1024 / 1024 < 100
      if (
        [
          'video/mp4',
          'video/ogg',
          'video/flv',
          'video/avi',
          'video/wmv',
          'video/rmvb'
        ].indexOf(file.type) === -1
      ) {
        this.$message.error('请上传MP4格式的视频文件')
        return false
      }
      if (!isLt15M) {
        this.$message.error('上传视频大小不能超过 100MB!')
        return false
      }
    },
    exceed(files, fileList) {
      this.$message.error('超出限制，只能最多选一个视频，请删除后再添加')
    },
    // 覆盖默认的上传行为，自定义上传的实现
    uploadPc(file) {
      this.afterRead(file)
    },
    submitFile() {
      this.$refs.eleUpload.submit()
    }
  },
  created() {
    // this.getSignature()
  },
  mounted() {
    // this.initUpload()
  }
}
</script>
<style lang="scss" scoped>
.overzhao {
  position: fixed;
  z-index: 999999;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.6);
}
.block {
  transform: translate(-50%, -50%);
  left: 50%;
  top: 50%;
  position: absolute;
  .h3 {
    width: 3rem;
    position: absolute;
    left: -1.2rem;
    top: 0.8rem;
    text-align: center;
    font-size: 0.12rem;
    font-weight: 400;
    color: #1989fa;
  }
}
.h32{
  font-style: normal;
  color: #1989fa;
  position: relative;
      left: -24px;
    top: 15px;
}
</style>
